/*******************************************************************************
 * turkucalendar-front.layout.scss
 *
 * Layout built with Singularity.
 ******************************************************************************/
body {
  background: #343E51;
}

.l-header {
  background: transparent;
}

.l-navigation-top {
  z-index: 4;
  display: block;
  position: relative;
  width: 100%;
}

.l-branding {
  z-index: 5;
  position: relative;
}

@media screen and (min-width: 60em) {
  .l-custom-navigation {
    float: none;
    margin: 0 auto;
    max-width: 1320px;
  }
}

.l-region--top-carousel {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0;
  background-color: #37475E;
}

@media screen and (min-width: 75em) {
  .l-region--top-carousel {
    width: 65.5914%;
    float: left;
    margin-right: 3.22581%;
  }
}

.l-region--top-tabs {
  display: none;
}

@media screen and (min-width: 75em) {
  .l-region--top-tabs {
    display: block;
  }
}

.l-filters {
  z-index: 4;
  background-color: #FAFCFD;
  padding-top: 15px;
  position: relative;
}

@media screen and (min-width: 40em) {
  .l-filters {
    background-color: #37475E;
    margin-top: 100px;
    padding-top: 0;
  }
}

.l-region--filters {
  background-color: #37475E;
  margin: 0 auto;
  max-width: 1112px;
}

.l-region--filters:before, .l-region--filters:after {
  content: "";
  display: table;
}

.l-region--filters:after {
  clear: both;
}

@media screen and (min-width: 40em) {
  .l-region--filters {
    position: relative;
    top: -60px;
  }
}

.l-main-wrapper {
  z-index: 3;
  background-color: #FAFCFD;
  clear: both;
  overflow: hidden;
  padding: 2em 0;
  position: relative;
}

.l-main {
  padding-bottom: 1em;
}

.l-main:before, .l-main:after {
  content: "";
  display: table;
}

.l-main:after {
  clear: both;
}

.l-content {
  background-color: #FFFFFF;
  padding: 0 !important;
}

.l-content:before, .l-content:after {
  content: "";
  display: table;
}

.l-content:after {
  clear: both;
}

@media screen and (min-width: 48em) {
  .l-content {
    width: 100%;
    float: left;
    margin-left: 0;
    margin-right: 0;
  }
}

.l-region,
.l-content {
  margin: 0 16px;
}

@media screen and (min-width: 48em) {
  .l-region,
  .l-content {
    margin: 0 auto;
  }
}

.l-highlights .l-region {
  margin: 0;
}

@media screen and (min-width: 60em) {
  .l-navigation-top,
  .l-highlights,
  .l-branding-wrapper,
  .l-header-top .l-navigation {
    float: none;
    margin: 0 auto;
    max-width: 1320px;
    padding: 8px;
  }
}

.l-highlights {
  z-index: 4;
  margin: 1em auto;
  position: relative;
}

.l-highlights:before, .l-highlights:after {
  content: "";
  display: table;
}

.l-highlights:after {
  clear: both;
}

@media screen and (min-width: 60em) {
  .l-highlights {
    margin: 2em auto;
  }
}

.l-footer {
  z-index: 3;
  background: #37475E;
}

.l-footer .l-after-footer-wrapper {
  background: #343E51;
}

@media screen and (min-width: 48em) {
  .l-main,
  .l-footer .l-region {
    float: none;
    margin: 0 auto;
    max-width: 1320px;
    padding: 8px;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
