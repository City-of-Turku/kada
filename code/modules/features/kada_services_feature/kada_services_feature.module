<?php
/**
 * @file
 * Code for the KADA Services feature.
 */

include_once 'kada_services_feature.features.inc';

/**
 * Implements hook_theme().
 */
function kada_services_feature_theme() {
  return array(
    'service_tree' => array(
      'variables' => array('items' => NULL),
      'template' => 'service-tree',
    ),
  );
}

/**
 * Implements template_preprocess_service_tree().
 */
function template_preprocess_service_tree(&$variables) {
  foreach($variables['items'] as $nid => &$item) {
    $node = node_load($nid);
    $wrapper = entity_metadata_wrapper('node', $node);
    // Store node object into item.
    $item['node'] = $node;
    // Create simple link into service.
    $item['service'] = l($wrapper->title_field->value(), drupal_get_path_alias('node/' . $nid));
  }
}

/**
 * Implements hook_block_info().
 */
function kada_services_feature_block_info() {
  return array(
    'related_services' => array(
      'info' => t('Related services for current service'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function kada_services_feature_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'related_services':
      // Get current node.
      $node = menu_get_object();
      $content = '';
      if (isset($node->type) && $node->type == 'service') {
        // Show tree from current node by default.
        $nid = $node->nid;
        // If node has parent service, use that as starting point for tree.
        if (isset($node->field_parent_service[LANGUAGE_NONE][0]['endpoints'][LANGUAGE_NONE][1]['entity_id'])) {
          $nid = $node->field_parent_service[LANGUAGE_NONE][0]['endpoints'][LANGUAGE_NONE][1]['entity_id'];
        }
        // Init service tree with parent node info and get tree.
        $tree[$nid] = array(
          'nid' => $nid,
          'children' => kada_services_feature_get_service_tree($nid),
        );
        // Build render array out of tree.
        if (!empty($tree[$nid]['children'])) {
          $content = kada_services_feature_service_tree_build($tree);
          $content = render($content);
        }
      }
      $block['subject'] = t('Related services');
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Creates service tree from given node id.
 * @param  integer $nid     Node id.
 * @return string           Service tree markup.
 */
function kada_services_feature_get_service_tree($nid) {
  $tree = array();
  // Get children services via relation endpoints.
  $query = "SELECT node.nid FROM {node}
    INNER JOIN {field_data_endpoints} fde ON node.nid = fde.endpoints_entity_id AND fde.bundle = 'related_service' AND fde.endpoints_entity_type = 'node' AND fde.endpoints_r_index = '0'
    INNER JOIN {field_data_endpoints} fde2 ON fde.entity_id = fde2.entity_id AND fde2.endpoints_entity_type = 'node' AND fde2.endpoints_r_index != fde.endpoints_r_index
    INNER JOIN {node} parent ON fde2.endpoints_entity_id = parent.nid AND fde2.endpoints_entity_type = 'node'
    WHERE parent.nid = :parent_nid AND node.status = '1' AND node.type = 'service'";
  $result = db_query($query, array(':parent_nid' => $nid));
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      // Set found children and get tree for it recursively.
      $tree[$row['nid']] = array(
        'nid' => $row['nid'],
        'children' => kada_services_feature_get_service_tree($row['nid']),
      );
    }
  }
  if (empty($tree)) {
    return FALSE;
  }
  return $tree;
}

/**
 * Builds render array out of service tree.
 * @param  array  $tree   Service tree array.
 * @return array          Service tree render array.
 */
function kada_services_feature_service_tree_build($tree) {
  $build = array(
    '#theme' => 'service_tree',
    '#items' => array(),
  );
  foreach ($tree as $nid => $item) {
    $build['#items'][$nid] = array(
      'nid' => $nid,
    );
    if ($item['children']) {
      $build['#items'][$nid]['children'] = kada_services_feature_service_tree_build($item['children']);
    }
  }
  return $build;
}
