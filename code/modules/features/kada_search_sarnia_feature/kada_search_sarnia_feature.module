<?php
/**
 * @file
 * Code for the KADA Search Sarnia feature.
 */

include_once 'kada_search_sarnia_feature.features.inc';
/**
 * Implements hook_facet_items_alter() from Facet Bonus module.
 */
function kada_search_sarnia_feature_facet_items_alter(&$build, &$settings) {
  global $language;
  // All terms have only tid in Solr index, so the translated name has to be
  // fetched and the facet item label replaced.
  switch ($settings->facet) {
    case 'im_field_classification':
    case 'im_field_district':
    case 'im_field_office_tr':
    case 'im_field_target_audience':
    case 'im_field_theme':
    case 'im_relation_trustee_person_node_reverse$field_trust_unit':
    case 'im_relation_trustee_person_node_reverse$field_trustee_role':
    case 'is_field_political_party':
    case 'im_field_keywords':
      foreach($build as $key => $item) {
        $tid = $item['#markup'];
        // Fetch term
        $term = taxonomy_term_load($tid);
        // If vocabulary is using entity translation, we have the value in
        // the fetched term object.
        if (isset($term->name_field)) {
          // Making sure translation exists
          if (isset($term->name_field[$language->language])) {
            $build[$key]["#markup"] = $term->name_field[$language->language]['0']['safe_value'];
          }
        } else {
          // When vocabulary is not using entity translation, the translation
          // has to be fetched with i18n.
          $translated_term = i18n_taxonomy_localize_terms($term);
          $build[$key]["#markup"] = $translated_term->name;
        }
      }
    break;
    case 'ss_type':
      foreach($build as $key => $item) {
        // Handle "proceeding" differently because it's not a Drupal content
        // type
        if ($item['#markup'] == 'proceeding') {
          $build[$key]["#markup"] = t('Agendas and minutes of meetings');
        }
        else {
          // Get content type name with indexed machine name
          $build[$key]["#markup"] = node_type_get_name($item['#markup']);
        }
        switch ($key) {
          case '"news_item"':
            if (isset($build['"liftup"']['#count'])) {
              // Save this number to add on the combined facet item.
              $liftup_amount = $build['"liftup"']['#count'];
              // Smash the count of hits together.
              if ($build['"news_item"']['#count'] > 0) {
                $build['"news_item"']['#count'] = $build['"news_item"']['#count'] + $liftup_amount;
              }
            }
          break;
          // Remove liftup facet because it will be combined to news item
          case '"liftup"':
            unset($build['"liftup"']);
          break;
        }
      }
    break;
    case 'sm_field_person_type':
      foreach($build as $key => $item) {
        if ($item['#markup'] == 'trustee') {
          $build[$key]["#markup"] = t('Trustee');
        }
        if ($item['#markup'] == 'employee') {
          $build[$key]["#markup"] = t('Employee');
        }
      }
    break;
  }
}

/**
 * Alters sarnia search query
 */
function kada_search_sarnia_feature_search_api_query_alter(SearchApiQueryInterface $query) {
  // Get user language from global variable
  global $language;
  if ($query->getIndex()->getEntityType()) {
    $info = entity_get_info($query->getIndex()->getEntityType());
    if(isset($info['bundles']['sarnia_kada_sarnia_search'])) {
      if ($info['bundles']['sarnia_kada_sarnia_search']['machine_name'] == 'sarnia_kada_sarnia_search') {
        // Add language condition to language field / filter
        $query->condition('ss_search_api_language', $language->language, '=');
      }
    }
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function kada_search_sarnia_feature_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  // Dig into facet array and alter call arguments to include also liftups when
  // searching for news items.
  $facet_item = $query->getFilter()->getFilters();
  if (!empty($facet_item) && is_object($facet_item[0])) {
    $facet_item = $facet_item[0]->getFilters();
    if (!empty($facet_item[0][1])) {
      $facet_item = $facet_item[0][1];
      // When selecting news_item items from index, return also liftup items
      if ($facet_item === '"news_item"') {
        $call_args['params']['fq'][0] = $call_args['params']['fq'][0] . ' OR  ss_type:"liftup"';
      }
    }
  }
}
