<?php
/**
 * @file
 * Code for the KADA Search feature.
 */

include_once 'kada_search_feature.features.inc';

/**
 * Implements hook_menu().
 */
function kada_search_feature_menu() {
  $items['admin/config/search/boost'] = array(
    'title' => 'Search boosting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kada_search_feature_boost_settings_form'),
    'access arguments' => array('administer search_api'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/search/exclude_content'] = array(
    'title' => 'Exclude from search',
    'description' => 'Exclude and hide content/groups from being shown in search results and search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kada_search_feature_exclude_content_settings_form'),
    'access arguments' => array('administer search_api'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Admin settings form for /admin/config/search/boost for boosting document types in search
 */
function kada_search_feature_boost_settings_form($form, &$form_state) {
  $form['kada_search_feature_boost_types'] = array(
    '#type' => 'textarea',
    '#title' => t('Boost factors for different document types'),
    '#default_value' => variable_get('kada_search_feature_boost_types', ''),
    '#description' => t('Boost factors for document types, in a format type|50, for example: page|50. One by line.'),
  );

  return system_settings_form($form);
}

/**
 * Admin settings for excluding content from search.
 */
function kada_search_feature_exclude_content_settings_form($form, &$form_state) {
  $group_options = array();
  $bundles = og_get_all_group_bundle();

  // Get OG bundles.
  if (isset($bundles['node'])) {
    foreach ($bundles['node'] as $type => $title) {
      $nodes = node_load_multiple(array(), array('type' => $type));

      foreach ($nodes as $node) {
        $group_options[$node->nid] = $node->title;
      }
    }
  }

  $form['kada_search_feature_exclude_groups'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exclude organic groups'),
    '#description' => t('Select the organic group that will be excluded from search results'),
    '#options' => $group_options,
    '#default_value' => variable_get('kada_search_feature_exclude_groups', array()),
  );

  return system_settings_form($form);
}

function kada_search_feature_block_info() {
  $blocks['quicksearch'] = array(
    'info' => t('Search'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

function kada_search_feature_block_view($delta = '') {
  $block = array();
  if ($delta == 'quicksearch') {
    $block['subject'] = t('Search');
    $block['content'] = drupal_get_form('kada_search_feature_search_form');
  }
  return $block;
}

function kada_search_feature_search_form($form, &$form_state) {
  $form['q'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyword'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  return $form;
}

function kada_search_feature_search_form_submit($form, &$form_state) {
  // TODO: Does this need to be sanitised?
  $keyword = $form_state['values']['q'];

  drupal_goto('search', array('query' => array('keys' => $keyword)), 303);
}

/**
 * Implements hook_entity_property_info_alter().
 */
function kada_search_feature_entity_property_info_alter(&$info) {
  // Skeleton property to be used with Search API and Solr index
  $info['node']['properties']['individual_dates'] = array(
    'type' => 'list<date>',
    'label' => t('Time period'),
    'sanitized' => TRUE,
    'getter callback' => 'kada_search_feature_individual_dates_callback',
  );
  // Adding a "Rendered entity" property for nodes, so that they can be indexed
  // to Solr and displayed in views.
  $info['node']['properties']['kada_rendered_entity'] = array(
    'type' => 'text',
    'label' => t('Rendered entity'),
    'computed' => TRUE,
    'entity views field' => TRUE,
    'sanitized' => TRUE,
    'getter callback' => 'kada_search_feature_rendered_entity_callback',
    'raw getter callback' => 'kada_search_feature_rendered_entity_callback',
    'translatable' => TRUE,
  );
  // Adding a "Translated URL" property for nodes, so that they will get proper
  // URL to Solr index. Only needed for content translated nodes.
  $info['node']['properties']['kada_translated_url'] = array(
    'type' => 'text',
    'label' => t('Translated URL'),
    'computed' => TRUE,
    'entity views field' => TRUE,
    'sanitized' => TRUE,
    'getter callback' => 'kada_search_feature_translated_url_callback',
    'raw getter callback' => 'kada_search_feature_translated_url_callback',
  );
}

/**
 * Getter callback for individual_dates property.
 */
function kada_search_feature_individual_dates_callback($item) {
  if ($item->type == 'event' && $item->field_date_type['und'][0]['value'] != 'super') {
    // This will go through the dates of the event and return a value for
    // every day between start and end date if an event has one. Super event
    // dates are ignored, because they always span over longer periods.
    $dates = array();

    // If there is a different end date to start date, then create a date period
    // and return all date values in between.
    if ($item->field_event_date['und'][0]['value'] != $item->field_event_date['und'][0]['value2']) {
      $period = new DatePeriod(
        new DateTime($item->field_event_date['und'][0]['value']),
        new DateInterval('P1D'),
        new DateTime($item->field_event_date['und'][0]['value2'])
      );
      foreach ($period as $date) {
        $dates[] = $date->format('Y-m-d');
      }
    } else {
      $date = new DateTime($item->field_event_date['und'][0]['value']);
      $dates[] = $date->format('Y-m-d');
    }

    return $dates;
  }
}

/**
 * Getter callback for kada_rendered_entity property.
 */
function kada_search_feature_rendered_entity_callback($item) {
  $formatted_html = '';
  // First check if the item has the required view mode in use
  $view_modes = field_view_mode_settings('node', $item->type);
  foreach ($view_modes as $view_mode => $value) {
    if ($view_mode == 'search_result' && $value['custom_settings'] == '1') {
      // Making sure we have a real language per item
      if ($item->language == 'und') {
        // Continue actually skips the rest of the foreach loop
        continue;
      }

      // Force all possible language variables to the item language, before
      // rendering it to make sure all labels and referenced content is indexed
      // in correct language.
      global $language;
      global $language_content;
      global $language_url;
      global $i18n_language_variable;
      $langs = language_list(); // Note: No argument.
      $language = $language_content = $language_url = $i18n_language_variable = $langs[$item->language];
      // Then load the entity and create display html to be indexed
      // to Solr.
      $entities = entity_load('node', array($item->nid), array(), TRUE);
      $render_array = entity_view('node', $entities, 'search_result', $item->language, TRUE);
      $rendered_html = render($render_array);

      // Replacing any embedded link protocol, because by default they will
      // point to https during indexing.
      $rendered_html = str_replace('https://', 'http://', $rendered_html);
      $formatted_html = check_markup($rendered_html, 'full_html');
    }
  }

  return $formatted_html;
}

/**
 * Getter callback for kada_translated_url property.
 */
function kada_search_feature_translated_url_callback($item) {
  $full_alias = '';
  // First get the path alias for the node in the language of the item
  $nid = $item->nid;
  // Get the language object for item language
  $installed_languages = language_list();
  $language_object = $installed_languages[$item->language];
  // Then generate the absolute alias for indexing
  $options = array(
    'absolute' => TRUE,
    'https' => FALSE,
    'language' => $language_object,
  );
  // Code to replace indexed url for liftups.
  if (isset($item->type) && $item->type == 'liftup') {
    $wrapper = entity_metadata_wrapper('node', $item);
    $liftup_url_alias = $wrapper->field_link_to_content->value()['url'];
    $full_alias = url($liftup_url_alias, $options);
  }
  // For other content types.
  else {
    $full_alias = url("node/$nid", $options);
  }
  // Make sure NO HTTPS goes to index!
  $full_alias = str_replace('https://', 'http://', $full_alias);

  return $full_alias;
}

/**
 * Implements hook_search_api_solr_documents_alter().
 */
function kada_search_feature_search_api_solr_documents_alter(&$documents, $index, $items) {
  // Merge field_keywords_et into field_keywords
  if ($index->machine_name == 'kada_content') {
    foreach ($documents as $delta => $document) {
      $field_keywords_et = $document->getField('im_field_keywords_et');

      if (!empty($field_keywords_et)) {
        $document->setField('im_field_keywords', $field_keywords_et['value'], $field_keywords_et['boost']);
      }
    }
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 *
 * Alters the query sent to SOLR to add boost query parameters
 */
function kada_search_feature_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  // Boost types defined in /admin/config/search/boost
  $boost_types = variable_get('kada_search_feature_boost_types', 'page|50');
  $boost_types = explode("\n", $boost_types);
  foreach ($boost_types as $boost_type) {
    $boost_type = explode('|', $boost_type);
    $call_args['params']['bq'][$boost_type[0]] = "ss_type:\"$boost_type[0]\"^$boost_type[1]";
  }

  // Filter out excluded groups.
  $excluded_groups = array_filter(variable_get('kada_search_feature_exclude_groups', array()));
  foreach ($excluded_groups as $gid) {
    $call_args['params']['fq'][] = "-im_og_group_ref:$gid OR -is_nid:$gid";
  }
}

/**
 * Implements hook_block_view_alter().
 */
function kada_search_feature_block_view_alter(&$data, $block) {
  // add news archive link to feed tabs
  if (in_array($block->delta, array("feed_tabs", "feed_tabs_section"))) {
    $data['content']['content']['tabs']['tablinks'][] = array(
      '#type' => 'link',
      '#title' => t('News archive'),
      '#href' => '/search/type/"news_item"',
      '#options' => array(
        'attributes' => array(
          'class' => array('quicktabs-news-archive-link'),
        ),
      ),
    );
  }
}

/**
 * Implements hook_entity_update().
 */
function kada_search_feature_entity_update($entity, $entity_type) {
  // Delete also translated indexed items, otherwise they will stay in their
  // current state.
  if (!empty($entity->translations->data) && empty($entity->status)) {
    $items_ids = array();
    foreach ($entity->translations->data as $lang => $values) {
      // search_api_et module indexes items with the language prefix and nid,
      // so we need to build a list of items to remove from the index, und
      // is never indexed for multilingual indexes so we can skip that.
      if ($lang != 'und') {
        $items_ids[] = $lang . '_' . $entity->nid;
      }
    }
    // Remove the translations from all indexes
    search_api_track_item_delete('search_api_et_' . $entity_type, $items_ids);
  }
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function kada_search_feature_search_api_index_items_alter(&$items, $index) {
  if ($index->machine_name == 'kada_content') {
    foreach ($items as $key => $node) {
      if ($node->type == 'event') {
        $wrapper = entity_metadata_wrapper('node', $node);
        // Make sure this sub event has a parent/master event reference
        if ($wrapper->field_date_type->value() == 'sub' && !empty($node->field_super_event)) {
          // Let's find the super event and index values from there
          // Relation field doesn't seem to work with wrapper, doing it the
          // old-skool way
          $super_event_nid = $node->field_super_event['und'][0]['endpoints']['und'][1]['entity_id'];
          $super_event = node_load($super_event_nid);
          $super_event_wrapper = entity_metadata_wrapper('node', $super_event);

          // If a sub event field is empty, then index the value from the super
          // event
          foreach(field_info_instances('node', $node->type) as $instance) {
            $field_name = $instance['field_name'];
            $field = field_info_field($field_name);
            if (empty($node->$field_name) && !empty($super_event->$field_name)) {
              $items[$key]->$field_name = $super_event->$field_name;
            }
          }
        }
        // Skip indexing of super events
        if ($wrapper->field_date_type->value() == 'super') {
          unset($items[$key]);
        }
      }
    }
  }
}
