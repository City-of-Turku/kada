<?php
/**
 * @file
 * Code for the KADA Media feature.
 */

include_once 'kada_media_feature.features.inc';

/**
 * Implements hook_menu().
 */
function kada_media_feature_menu() {
  // Menu items to point into atom add pages
  $items['admin/content/atom/add'] = array(
    'title' => 'Add media',
    'page callback' => 'drupal_goto',
    'page arguments' => array('atom/add'),
    'access callback' => 'scald_atom_add_access',
  );
  $atom_types = scald_type_get_names();
  foreach ($atom_types as $type => $name) {
    $items['admin/content/atom/add/' . $type] = array(
      'title' => $name,
      'page callback' => 'drupal_goto',
      'page arguments' => array('atom/add/' . $type),
      'access callback' => 'scald_atom_add_access',
    );
  }
  return $items;
}

/**
 * Implements hook_permission().
 */
function kada_media_feature_permission() {
  return array(
    'kada_media_feature view only own atoms' => array(
      'title' => t('View ONLY own atoms in administration'),
      'description' => t('NOTE: This overrides normal SCALD permissions in administration views because all atoms typically have view and fetch actions chosen.'),
    ),
  );
}

/**
 * Implements hook_views_default_view_override_views_to_override().
 */
function kada_media_feature_views_default_view_override_views_to_override() {
  return array(
    // Override default scald atoms and library views with Kada specific ones.
    'scald_atoms' => 'kada_scald_atoms',
    'scald_library' => 'kada_scald_library',
  );
}

/**
 * Implements hook_ds_fields_info().
 */
function kada_media_feature_ds_fields_info($entity_type) {
  $fields = array();
  // Scald File: Title file link.
  $fields['scald_atom']['title_file_link'] = array(
    'title' => t('Title file link'),
    'ui_limit' => array('file|*'),
    'field_type' => DS_FIELD_TYPE_PREPROCESS,
  );
  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }
  return;
}

/**
 * Implements hook_entity_view().
 */
function kada_media_feature_entity_view($entity, $type, $view_mode, $langcode) {
  // Handle only widgets.
  if ($type != 'scald_atom') {
    return;
  }
  global $language;
  // Handle file atoms.
  if ($entity->type == 'file') {
    if (isset($entity->field_title_text[$language->language][0]['value'])) {
      $title_text = $entity->field_title_text[$language->language][0]['value'];
    }
    else if (isset($entity->field_title_text[$entity->language][0]['value'])) {
      $title_text = $entity->field_title_text[$entity->language][0]['value'];
    }
    if (!empty($title_text)) {
      // Populate custom ds field title_file_link if title text exists.
      $entity->content['title_file_link'] = array(
        '#theme' => 'link',
        '#text' => $title_text,
        '#path' => file_create_url($entity->file_source),
        '#options' => array(
          'attributes' => array('target' => '_blank'),
          'html' => FALSE,
        ),
      );
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function kada_media_feature_entity_presave($entity, $type) {
  // Make sure we only work with atoms.
  if ($type != 'scald_atom') {
    return;
  }

  /**
   * Set scald atom title into filename or source id for each provider.
   * This is needed in future for searching already inserted filenames or sources.
   */
  switch ($entity->provider) {
    case 'scald_image':
    case 'scald_file':
      $file = file_load($entity->base_id);
      if (isset($file->filename)) {
        $entity->title = $file->filename;
      }
      break;
    case 'scald_youtube':
    case 'scald_vimeo':
      $entity->title = $entity->base_id;
      break;
  }
}

/**
 * Determines whether a given event node belongs to events or hobbies.
 *
 * returns 'hobby' or 'event' or (FALSE if not an event node)
 */
function _determine_event_type($node) {
  if ($node->type != 'event') {
    // only process event nodes
    return FALSE;
  }

  $node_wrapper = entity_metadata_wrapper('node', $node);

  foreach ($node_wrapper->field_event_types->value() as $type) {
    $tid = $type->tid;
    $parent = taxonomy_get_parents($tid);

    if (empty($parent)) {
      // $type is already a root term
      $term = $type;
    }
    else {
      // $type is not a root term, so iterate through its parents
      do {
        $term = array_values($parent)[0];
        $tid = $term->tid;
        $parent = taxonomy_get_parents($tid);
      } while (!empty($parent));
    }

    if ($term->name == 'Event') {
      return 'event';
    }
    elseif ($term->name == 'Hobby') {
      return 'hobby';
    }
  }

  // fallback in case the event has no specified type
  return 'event';
}

/**
 * Implements hook_node_view();
 */
function kada_media_feature_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'liftup' && $view_mode == 'current') {
    $node->content['field_main_image']['#markup'] = theme('remote_image_style', array(
        'style_name' => 'current',
        'path' => drupal_get_path('theme', 'driveturku') . '/images/placeholder_image.png')
    );
  }

  if ($node->type == 'page' && $view_mode == 'teaser') {
    $node->content['field_main_image']['#markup'] = theme('remote_image_style', array(
        'style_name' => 'topics',
        'path' => drupal_get_path('theme', 'driveturku') . '/images/placeholder_image.png')
    );
  }

  // Event images
  // Check if event image is missing and use image from external event form, or a placeholder
  if ($node->type == 'event' && empty($node->field_content_image_et)) {

    // Name mappings
    // This is why attention should be paid when naming things!

    // Mapping of view modes to image styles
    $viewmode_to_imagestyle = array(
      'full'                => 'event_node',
      'event_grid_item'     => 'grid_item',
      'event_list_item'     => 'event_list_image',
      'event_map_item'      => 'event_list_image',
      'event_search_result' => 'event_list_image',
      'event_mosaic_item'   => 'grid_item',
      'event_tab_list_item' => 'event_tab_item',
      'opengraph'           => 'opengraph',
    );

    // Mapping of view modes to Scald contexts
    $viewmode_to_scaldcontext = array(
      'full'                => 'event_node',
      'event_grid_item'     => 'grid_item',
      'event_list_item'     => 'event_list',
      'event_map_item'      => 'event_list',
      'event_search_result' => 'event_list_image',
      'event_mosaic_item'   => 'grid_item',
      'event_tab_list_item' => 'event_tab_item',
      'opengraph'           => 'opengraph',
    );

    $image_style = (isset($viewmode_to_imagestyle[$view_mode])) ? $viewmode_to_imagestyle[$view_mode] : FALSE;
    $scald_context = (isset($viewmode_to_scaldcontext[$view_mode])) ? $viewmode_to_scaldcontext[$view_mode] : FALSE;

    if ($image_style) {

      // Images for events added through the external form
      if (!empty($node->field_content_image_ext)) {

        $image = $node->field_content_image_ext[LANGUAGE_NONE][0];
        $title = $node->title;

        // Get image styles from Scald config
        $scald_context_config = scald_context_config_load($scald_context);
        $picture_mapping_name = $scald_context_config->transcoder['image']['*'];

        // Try to get picture mapping
        $pattern = '/^group-(.+)/';
        if (preg_match($pattern, $picture_mapping_name, $matches)) {
          $picture_mapping = picture_mapping_load($matches[1]);

          // If we have a picture mapping, use it
          if (!empty($picture_mapping)) {
            $breakpoints = picture_get_mapping_breakpoints($picture_mapping, $image_style);
            $picture_variables = array(
              'uri' => $image['uri'],
              'alt' => $image['title'],
              'breakpoints' => $breakpoints,
              'attributes' => array(),
              'style_name' => $image_style,
            );
            $markup = theme_picture($picture_variables);
          }
        }

        // Try to get image style
        else {
          $image_variables = array(
            'style_name' => $image_style,
            'path' => $image['uri'],
            'alt' => $image['title'],
            'title' => $image['title'],
          );
          $markup = theme_image_style($image_variables);
        }

        $node->content['field_content_image_et']['#markup'] = $markup;
      }

      // Placeholder images for events that have no images at all
      if (empty($node->content['field_content_image_et'])) {
        $event_type = _determine_event_type($node);
        $placeholder_url = array(
          'event' => '/images/placeholder_image_event.png',
          'hobby' => '/images/placeholder_image_hobby.png',
        );
        $node->content['field_content_image_et']['#markup'] = theme('remote_image_style', array(
            'style_name' => $image_style,
            'path' => drupal_get_path('theme', 'driveturku') . $placeholder_url[$event_type])
        );
      }
    }
  }

  // Add placeholder image to SoMe content that has no image
  // Same place holder is used on event and hobby sides
  if ($view_mode == 'event_grid_item' && $node->type == 'social_media_update') {
    if (empty($node->field_image)) {
      $node->content['field_image']['#markup'] = theme('remote_image_style', array(
        'style_name' => 'grid_item',
        'path' => drupal_get_path('theme', 'driveturku') . '/images/placeholder_image_event.png')
      );
    }
  }
}

/**
 * Implements hook_colorbox_settings_alter()
 */
function kada_media_feature_colorbox_settings_alter(&$data, $style, $context) {
  $menu_object = menu_get_object();
  if ($menu_object !== NULL && $menu_object->type == 'news_item') {
    $data['rel'] = 'node-gallery';
    drupal_add_js(drupal_get_path('module', 'kada_media_feature') . '/auto_gallery.js');
  }
}

/**
* Implements hook_entity_view_mode_alter()
*/
function kada_media_feature_entity_view_mode_alter(&$view_mode, $context) {
  // Set wide view mode for wide main news liftups
  if ($context['entity_type'] == 'node' && $view_mode == 'main_news') {
    if ($context['entity']->field_liftup_width[LANGUAGE_NONE][0]['value'] == '4') {
      $view_mode = 'main_news_wide';
    }
  }
}

/**
* Implements hook_token_info().
*/
function kada_media_feature_token_info_alter(&$data) {
  $data['tokens']['atom']['title_text'] = array(
    'name' => t('Title text'),
    'description' => t('The caption of the atom.'),
  );
  $data['tokens']['atom']['alt_text'] = array(
    'name' => t('Alt text'),
    'description' => t('The alternative text content of the atom.'),
  );
}

/**
* Implements hook_tokens().
*/
function kada_media_feature_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'atom' && !empty($data['atom'])) {
    $atom = $data['atom'];
    $sanitize = !empty($options['sanitize']);
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'title_text':
          $replacements[$original] = $atom->field_title_text[$atom->language][0]['safe_value'];
          break;

        case 'alt_text':
          $replacements[$original] = $atom->field_alt_text[$atom->language][0]['safe_value'];
          break;

        default:
          if (substr($name, 0, 6) == 'field_') {
            $language = $atom->language;
            $replacements[$original] = $sanitize ?
             $atom->{$name}[$language][0]['safe_value'] :
             $atom->{$name}[$language][0]['value'];
          }
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_form_alter().
 */
function kada_media_feature_form_alter(&$form, &$form_state, $form_id) {
  // Target block forms and disable wysiwyg as scald breaks it.
  if (in_array($form_id, array('block_add_block_form', 'block_admin_configure'))) {
    $form['settings']['body_field']['body']['#wysiwyg'] = FALSE;
  }
}

/**
* Implements hook_mee_form_alter().
*/
function kada_media_feature_mee_form_alter(&$form, &$form_state, $form_id){
  $form['instance']['settings']['context'] = array(
    '#type' => 'select',
    '#title' => t('Scald Editor Context'),
    '#description' => t('Choose a Scald Context to use for displaying Scald Atoms included in the textarea during editing.'),
    '#default_value' => $settings['context'],
    '#options' => $context_options,
  );

  $form['#submit'][] = 'kada_media_feature_mee_submit_handler';
}

/**
* MEE form custom submit handler to set default DND context.
*/
function kada_media_feature_mee_submit_handler($form, &$form_state) {
  $context = $form_state['values']['instance']['settings']['context'];
  variable_set('dnd_context_default', $context);
}

/**
* Implements hook_field_attach_preprocess_alter().
*/
function kada_media_feature_field_attach_preprocess_alter(&$variables, $context) {
  global $language;
  // Set scald_thumbnail fields alt and title texts properly, quite hackish.
  if($context['entity_type'] == 'scald_atom') {
    if(isset($variables['content']['scald_thumbnail'][0])) {
      $atom = $variables['atom'];
      if(isset($atom->field_title_text[$language->language][0]['value'])) {
        $title_text = $atom->field_title_text[$language->language][0]['value'];
      }
      else if(isset($atom->field_title_text[$atom->language][0]['value'])) {
        $title_text = $atom->field_title_text[$atom->language][0]['value'];
      }
      if(isset($title_text)) {
        $variables['content']['scald_thumbnail'][0]['#item']['title'] = $title_text;
      }
      if(isset($atom->field_alt_text[$language->language][0]['value'])) {
        $alt_text = $atom->field_alt_text[$language->language][0]['value'];
      }
      else if(isset($atom->field_alt_text[$atom->language][0]['value'])) {
        $alt_text = $atom->field_alt_text[$atom->language][0]['value'];
      }
      if(isset($alt_text)) {
        $variables['content']['scald_thumbnail'][0]['#item']['alt'] = $alt_text;
      }
    }
  }
}

/**
* Implements template_preprocess_sdl_editor_legend().
*/
function kada_media_feature_preprocess_sdl_editor_legend(&$variables) {
  global $language;
  // Use correct title text for legend.
  if (in_array($variables['atom']->type, array('image', 'file', 'video'))) {
    if(isset($variables['atom']->field_title_text[$language->language][0]['safe_value'])) {
      $variables['atom']->rendered->title = $variables['atom']->field_title_text[$language->language][0]['safe_value'];
    }
    else if (isset($variables['atom']->field_title_text[$variables['atom']->language][0]['safe_value'])) {
      $variables['atom']->rendered->title = $variables['atom']->field_title_text[$variables['atom']->language][0]['safe_value'];
    }
  }
}

/**
 * Implements hook_filter_info().
 * @see: https://www.drupal.org/node/2236261
 */
function kada_media_feature_filter_info() {
  $filters = array();
  $filters['noteditable'] = array(
    'title' => t('Remove the attribute "contenteditable" from filtered text'),
    'process callback' => '_kada_media_feature_filter',
  );
  return $filters;
}

/**
 * Filter callback for our "noteditable" filter.
 */
function _kada_media_feature_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
  return str_ireplace('contenteditable="true"', '', $text);
}

/**
 * Add user uid filtering based on custom permission
 */
function kada_media_feature_views_query_alter(&$view, &$query) {
  global $user;
  // List of filtered views
  $view_name = array(
    'kada_scald_library',
    'kada_scald_atoms',
  );
  // List of filtered displays for views
  $current_display = array(
    'dnd_library_1',
    'page_1',
  );

  // If check for right views and custom permission
  if (in_array($view->name, $view_name) && in_array($view->current_display, $current_display)
    && user_access('kada_media_feature view only own atoms')) {
    $where = array(
      'field' => 'users_scald_atoms.uid',
      'value' => $user->uid,
      'operator' => '=',
    );
    // Add new where clauser to array
    $query->where[1]['conditions'][] = $where;
  }
}
