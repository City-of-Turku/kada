<?php
/**
 * @file
 * Code for the KADA configuration feature feature.
 */

include_once 'kada_configuration_feature.features.inc';

/**
 * Implements hook_menu().
 */
function kada_configuration_feature_init() {
  // Redirect to no translation info page if node page is not translated.
  // Look only for node page views.
  if (arg(0) == 'node' && arg(2) === NULL) {
    global $language;
    $node = menu_get_object();
    // If for some reason $node is not object, get out.
    if (!is_object($node)) {
      return;
    }
    $redirect = FALSE;
    // Entity translation.
    if (isset($node->translations)
      && $node->translations->original !== NULL
      && !isset($node->translations->data[$language->language])) {
      $redirect = TRUE;
    }
    // i18n.
    else if (isset($node->translations)
      && $node->translations->original === NULL
      && $language->language != $node->language) {
      $redirect = TRUE;
    }
    if($redirect) {
      // Temporary redirect.
      drupal_goto('page-not-translated', array(), 307);
    }
  }
}

/**
 * Implements hook_theme().
 */
function kada_configuration_feature_theme() {
  return array(
    'page_not_translated' => array(
      'variables' => array('text' => NULL, 'backlink' => NULL),
      'template' => 'page-not-translated',
      'path' => drupal_get_path('module', 'kada_configuration_feature') . '/templates',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function kada_configuration_feature_menu() {
  // Create menu callback to show info regarding content translation.
  $items['page-not-translated'] = array(
    'title' => 'Page has not been translated',
    'page callback' => 'kada_configuration_feature_translation_unavailable',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // This is required to make a valid shortcut with Shortcut module.
  $items['kevytsivusto'] = array(
    'page callback' => 'drupal_goto',
    'page arguments' => array('http://kevyt.turku.fi/'),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function kada_configuration_feature_block_info() {
  return array(
    'tweet_embed' => array(
      'info' => t('Tweet embed'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function kada_configuration_feature_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'tweet_embed':
      $block['content'] = kada_configuration_feature_tweet_embed();
      break;
  }
  return $block;
}

/**
 * Renders tweet embed block data for given page.
 */
function kada_configuration_feature_tweet_embed() {
  $node = menu_get_object();
  $content = array();
  // If embed contains value, render it and add javascript for Twitter widgets.
  if (!empty($node->field_tweet_embed[LANGUAGE_NONE][0]['value'])) {
    $content['#markup'] = $node->field_tweet_embed[LANGUAGE_NONE][0]['value'];
    $content['#attached']['js'] = array(
      '//platform.twitter.com/widgets.js' => array(
        'type' => 'external',
        'scope' => 'footer',
      ),
    );
  }
  return $content;
}

/**
 * Renders no translation info page.
 */
function kada_configuration_feature_translation_unavailable() {
  $vars = array(
    'text' => t('Unfortunately, this page has not been translated.<br />Please use the search function or navigation to find similar contents.'),
  );
  return theme('page_not_translated', $vars);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function kada_configuration_feature_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add validator for tweet_embed field.
  if ($context['field']['field_name'] == 'field_tweet_embed') {
    $element['#element_validate'][] = '_kada_configuration_feature_field_tweet_embed_validate';
  }
}

/**
 * Validator for field_tweed_embed field. Also parses unneeded stuff away.
 */
function _kada_configuration_feature_field_tweet_embed_validate($element, &$form_state, $form) {
  if (!empty($element['value']['#value'])) {
    $dom = new DOMDocument();
    // DOMDocument expects ISO-8859-1 as per HTML4.0 standards
    $html = mb_convert_encoding($element['value']['#value'], 'HTML-ENTITIES', 'UTF-8');
    $dom->loadHTML($html);
    $links = $dom->getElementsByTagName('a');
    if($links->length == 1) {
      $link = $links->item(0);
      // Check for needed attributes and make sure that link does not have child nodes.
      if($link->childNodes->length != 1 && $link->childNodes->item(0)->nodeName == '#text'
        || is_null($link->attributes->getNamedItem('data-widget-id'))
        || is_null($link->attributes->getNamedItem('href'))) {
        form_error($element, t('Embed code is invalid.'));
        return;
      }
      // Update value for the field to only contain link html.
      $form_state['values']['field_tweet_embed'][LANGUAGE_NONE][0]['value'] = $link->C14N();
    }
    else {
      form_error($element, t('Embed code is invalid.'));
    }
  }
}

/**
 * Implements hook_date_formats().
 */
function kada_configuration_feature_date_formats() {
  return array(
    // Creates a new format for a new, custom format type.
    array(
      'type' => 'kada_date_only',
      'format' => 'd.m.Y',
      'locales' => array(),
    ),
    array(
      'type' => 'kada_date_only_no_zeros',
      'format' => 'j.n.Y',
      'locales' => array(),
    ),
    array(
      'type' => 'kada_time_only',
      'format' => 'H.i',
      'locales' => array(),
    ),
    array(
      'type' => 'kada_rss_time',
      'format' => 'r',
      'locales' => array(),
    ),
    array(
      'type' => 'kada_day_only',
      'format' => 'j.',
      'locales' => array(),
    ),
    array(
      'type' => 'kada_day_month_only',
      'format' => 'j.n.',
      'locales' => array(),
    ),
    array(
      'type' => 'kada_day_month_only_with_time',
      'format' => 'j.n. - G:i',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_date_format_types().
 */
function kada_configuration_feature_date_format_types() {
  return array(
    'kada_date_only' => t('Date only'),
    'kada_date_only_no_zeros' => t('Date only, no leading zeros'),
    'kada_time_only' => t('Time only'),
    'kada_rss_time' => t('RSS time'),
    'kada_day_only' => t('Day only'),
    'kada_day_month_only' => t('Day and month only'),
    'kada_day_month_only_with_time' => t('Day and month only with time'),
  );
}

function kada_configuration_feature_entity_view($entity, $type, $view_mode, $langcode) {
  // Because field collection doesn't work with entity translation, we have
  // to use our own display logic. Displaying only the values in current
  // language.
  if ($type == 'field_collection_item' && $entity->field_name == 'field_accessibility') {
    global $language;
    switch ($language->language) {
      case 'fi':
        if (!empty($entity->content['field_description_en'])) unset($entity->content['field_description_en']);
        if (!empty($entity->content['field_description_sv'])) unset($entity->content['field_description_sv']);
      break;
      case 'sv':
        if (!empty($entity->content['field_description_en'])) unset($entity->content['field_description_en']);
        if (!empty($entity->content['field_description_fi'])) unset($entity->content['field_description_fi']);
      break;
      case 'en':
        if (!empty($entity->content['field_description_fi'])) unset($entity->content['field_description_fi']);
        if (!empty($entity->content['field_description_sv'])) unset($entity->content['field_description_sv']);
      break;
    }
  }
}

/**
 * Moves Node clone link from action links to task links
 */
function kada_configuration_feature_menu_alter(&$items) {
  $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;
}

/**
 * Implements hook_js_alter().
 */
function kada_configuration_feature_js_alter(&$js) {
  // Move the settings JS after libraries so maps will work with AdvAgg enabled
  $js['settings']['group'] = -99;
}

/**
 * Implements hook_form_alter().
 */
function kada_configuration_feature_form_alter(&$form, &$form_state, $form_id) {
  $node_forms = array(
    'landing_page_node_form',
    'page_node_form',
    'webform_node_form',
  );
  // Make sure the node doesn't have menu item selected when editing node
  if (in_array($form_id, $node_forms) && empty($form['menu']['link']['mlid']['#value'])) {
    // Change menu default to empty label.
    // This change was not possible through interface
    $form['menu']['link']['parent']['#default_value'] = 'label_0';
  }
}
